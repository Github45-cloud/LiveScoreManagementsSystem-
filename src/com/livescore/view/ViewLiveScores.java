/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.livescore.view;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.ArrayList;
import com.livescore.controller.algorithm.SelectionSort;
import javax.swing.JOptionPane;
import com.livescore.controller.algorithm.SelectionSort; // For sorting methods
import com.livescore.controller.algorithm.BinarySearch;  // For binary search
import com.livescore.model.Match;                        // For Match class
import com.livescore.model.Match;
import com.livescore.model.MatchData; 
import com.livescore.model.MatchData;
import com.livescore.util.ValidationUtil;

/**
 *
 * @author Lenovo
 */
public class ViewLiveScores extends javax.swing.JFrame {
    
    public boolean deleteMatch(String matchId) {
    // Find the match in MatchData using the provided matchId
    Match matchToDelete = MatchData.getMatchById(matchId);
    
    if (matchToDelete != null) {
        // Remove the match from MatchData
        MatchData.getAllMatches().remove(matchToDelete);
        
        // Refresh the table to reflect the changes
        refreshTable(MatchData.getAllMatches());
        return true;
    } else {
        return false;
    }
}

private void refreshTable(List<Match> matches) {
    DefaultTableModel model = (DefaultTableModel) ViewLiveScores.getModel();
    model.setRowCount(0); // Clear existing rows

    for (Match match : matches) {
        model.addRow(new Object[] {
            match.getMatchId(),
            match.getTeam1(),
            match.getTeam1Score(),
            match.getTeam2(),
            match.getTeam2Score(),
            match.getStatus(),
            match.getVenue()
        });
    }
}

    
    private DefaultTableModel tableModel;

    
    public ViewLiveScores() {
        initComponents();
        tableModel = (DefaultTableModel) ViewLiveScores.getModel();
        loadMatches();
    }
    
    private void loadMatches() {
    List<Match> matches = MatchData.getAllMatches();
    tableModel.setRowCount(0); // Clear existing rows
    for (Match match : matches) {
        addMatchData(match.getMatchId(), match.getTeam1(), match.getTeam1Score(), match.getTeam2(), match.getTeam2Score(), match.getStatus(),match.getVenue());
    }

}
    
    public ViewLiveScores(List<Match> matches) {
        this(); // Call the default constructor to initialize components
        for (Match match : matches) {
            addMatchData(match.getMatchId(), match.getTeam1(), match.getTeam1Score(), match.getTeam2(), match.getTeam2Score(), match.getStatus(), match.getVenue());
        }
    }
    
    public void addMatchData(String matchId, String team1, int team1Score, String team2, int team2Score, String status, String venue) {
        Object[] row = { matchId, team1, team1Score, team2, team2Score, status, venue };
        tableModel.addRow(row);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ViewLiveScores = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        sort = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        SearchTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ViewLiveScores.setBackground(new java.awt.Color(0, 102, 102));
        ViewLiveScores.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        ViewLiveScores.setForeground(new java.awt.Color(204, 204, 204));
        ViewLiveScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Match Id", "Team 1", "Team 1 score", "Team 2", "Team 2 score", "Status", "Venue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ViewLiveScores);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1350, 670));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Current Live Matches");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 71));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/livescore/resources/liv (1).png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, 41));

        jButton1.setBackground(new java.awt.Color(102, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 20, 100, 30));

        sort.setBackground(new java.awt.Color(0, 51, 102));
        sort.setFont(new java.awt.Font("Segoe UI Symbol", 1, 20)); // NOI18N
        sort.setForeground(new java.awt.Color(255, 255, 255));
        sort.setText("Sort");
        sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortActionPerformed(evt);
            }
        });
        jPanel1.add(sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 20, 94, 30));

        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        jPanel1.add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 20, 30, 30));
        jPanel1.add(SearchTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, 150, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1350, 80));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new homepage().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean isAscending = true;
    
    
    private void sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortActionPerformed
        
    List<Match> allMatches = MatchData.getAllMatches();
    // Check if the table is empty
    if (allMatches.isEmpty()) {
        // Show an error message if the table is empty
        JOptionPane.showMessageDialog(this, "Error: Sorry, No matches are available currently", "Empty Table", JOptionPane.ERROR_MESSAGE);
        return;  // Exit the method without sorting
    }
    // Check the current sort order and sort accordingly
    if (isAscending) {
        // Sort in ascending order
        SelectionSort.sortAscending(allMatches);
        
        // Show a message indicating the sort order
        JOptionPane.showMessageDialog(this, "Sorted in ascending order");
    } else {
        // Sort in descending order
        SelectionSort.sortDescending(allMatches);
        
        // Show a message indicating the sort order
        JOptionPane.showMessageDialog(this, "Sorted in descending order");
    }
    // Toggle the sort order for the next click
    isAscending = !isAscending;
    
    // After sorting, refreshes the table
    refreshTable(allMatches);   
    }//GEN-LAST:event_sortActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
    String searchText = SearchTextfield.getText().trim();
    // Validate the search input
    if (ValidationUtil.isNullOrEmpty(searchText)) {
        JOptionPane.showMessageDialog(this, "Search term cannot be empty", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (!ValidationUtil.isValidMatchId(searchText)) {
        JOptionPane.showMessageDialog(this, "Invalid match ID format", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        return;
    }
    // Proceed with binary search 
    List<Match> allMatches = MatchData.getAllMatches();
    Match foundMatch = BinarySearch.search(allMatches, searchText, "matchId");
    if (foundMatch != null) {
        // Display match details
        List<Match> filteredMatches = new ArrayList<>();
        filteredMatches.add(foundMatch);
        refreshTable(filteredMatches);
    } else {
        JOptionPane.showMessageDialog(this, "No match found for: " + searchText, "No Results", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewLiveScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewLiveScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewLiveScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewLiveScores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewLiveScores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchTextfield;
    private javax.swing.JTable ViewLiveScores;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sort;
    // End of variables declaration//GEN-END:variables
}
